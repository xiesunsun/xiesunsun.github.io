<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-17T21:42:20+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">XIESUNSUN的秘密小屋</title><subtitle>愿你是阳光，明媚不忧伤！</subtitle><author><name>xiesunsun</name></author><entry><title type="html">Python与java在OOP方面的差异</title><link href="http://localhost:4000/OOPpython.html" rel="alternate" type="text/html" title="Python与java在OOP方面的差异" /><published>2021-11-17T00:00:00+08:00</published><updated>2021-11-17T00:00:00+08:00</updated><id>http://localhost:4000/OOPpython</id><content type="html" xml:base="http://localhost:4000/OOPpython.html">&lt;h2 id=&quot;关于类文件命名&quot;&gt;关于类文件命名&lt;/h2&gt;
&lt;p&gt;  在java中规定类文件的名称必须跟文件中唯一的一个public类的类名一样，而在python中没有这个要求，保存python类的文件名与类名没有关系,但是文件名最好有具体的含义&lt;/p&gt;
&lt;h2 id=&quot;关于python中类的格式&quot;&gt;关于python中类的格式&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;与其他语言类似，约定首字母大写的名称指的是类&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同样具有构造函数，类变量，成员变量，类方法，成员方法&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;&lt;em&gt;如下图&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;学生类&quot;&quot;&quot;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;''''初始化方法'''&lt;/span&gt;
     &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
     &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;同等效果的 java代码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated constructor stub&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//无参构造方法&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;关于指向该类的实例指针thisself以及父类的super&quot;&gt;关于指向该类的实例指针this,self，以及父类的super&lt;/h2&gt;
    &lt;p&gt;  java中的this,表示指向该类的实例对象，python中的self表示的创建类的实例本身，super都是指向父类的实例对象&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;关于构造方法其他方法&quot;&gt;关于构造方法，其他方法&lt;/h2&gt;
&lt;p&gt;  java中的构造函数分为（默认），有参（支持重载），构造函数名与类名一致&lt;/p&gt;

&lt;p&gt;  python的构造函数为&lt;font color=&quot;red&quot;&gt;__init__&lt;/font&gt;,其中形参&lt;font color=&quot;red&quot;&gt;self&lt;/font&gt;f必不可少，创建实例时不需要传入该参数，python解释器会自动传入，python类中的方法都需要&lt;strong&gt;&lt;em&gt;显式带上self&lt;/em&gt;&lt;/strong&gt;参数，通过对象调用时不用传入该参数&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;学生类&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;''''构造方法'''&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#self必不可少
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;关于实例变量类变量类方法&quot;&gt;关于实例变量，类变量，类方法&lt;/h2&gt;
&lt;p&gt;  在java中定义在类中的变量如果不是static修饰的，指的是实例变量（每个对象都会保存一份该变量，可以直接通过类名来访问）下图:Student类中的count在python中属于类变量，属于整个类，所有实例对象共同拥有一个count变量，相当于java中的实例变量（static修饰）,而age,name等在函数里通过self定义的变量称之为实例变量（需要通过实例对象来访问）。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;学生类&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#类变量
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;''''构造方法'''&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#实例变量
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#self必不可少
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;  类方法:java中的类方法通过static修饰，可以通过类名直接访问,python中的类方法和实例方法相似，它最少也要包含一个参数&lt;strong&gt;&lt;em&gt;cls&lt;/em&gt;&lt;/strong&gt;，Python 会自动&lt;strong&gt;&lt;em&gt;将类本身绑定给 cls 参数&lt;/em&gt;&lt;/strong&gt;和实例方法最大的不同在于，类方法需要使用＠classmethod修饰符进行修饰,如上图的&lt;strong&gt;&lt;em&gt;getNum()&lt;/em&gt;&lt;/strong&gt; 方法&lt;/p&gt;

&lt;p&gt;  在根据类创建完成的对象仍可以通过对象名.属性名的情况下增加对于该实例变量的属性，如下例&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'17'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'男'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;关于对象的创建&quot;&gt;关于对象的创建&lt;/h2&gt;
&lt;p&gt;  java可以通过&lt;font color=&quot;red&quot;&gt;new&lt;/font&gt;关键字来实现对象的实例化
python则通过类名来进行创建&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//java创建学生对象&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xiaoming&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#python创建学生对象
&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xiaoming'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'17'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;关于访问权限修饰符&quot;&gt;关于访问权限修饰符&lt;/h2&gt;
&lt;p&gt;java中有default,private,protected,public访问修饰符来控制类中属性的访问
python默认情况下类的所有成员变量都是public，如果需要，可以通过变量名前添加单个前缀_实现protected的效果，通过添加两个前缀__实现private效果，例如上面python student类的age属性&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//java访问修饰权限&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#python访问修饰权限
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ps:对于python中”private”修饰的变量你仍然可以同过对象名._类名__属性名的方式进行访问操作&lt;/p&gt;

&lt;h2 id=&quot;关于属性方法的调用&quot;&gt;关于属性，方法的调用&lt;/h2&gt;
&lt;p&gt;  java，python都可以通过实例对象.属性名(方法名)访问或者调用可见的方法&lt;/p&gt;

&lt;h2 id=&quot;关于类继承&quot;&gt;关于类继承&lt;/h2&gt;
&lt;p&gt;  python通过类名后的括号()来实现，java通过关键字extend来实现，python也支持多继承&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;gstudent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;ps运行时会把该文件中所包含的类给事先加载到frame里去&quot;&gt;ps:运行时，会把该文件中所包含的类给事先加载到frame里去&lt;/h4&gt;
&lt;h2 id=&quot;参考博客&quot;&gt;参考博客&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/CLHugh/article/details/75000104&quot;&gt;Python中self用法详解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/view/4552.html#:~:text=Python%E7%B1%BB%E6%96%B9%E6%B3%95%20Python%20%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9B%B8%E4%BC%BC%EF%BC%8C%E5%AE%83%E6%9C%80%E5%B0%91%E4%B9%9F%E8%A6%81%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E5%8F%AA%E4%B8%8D%E8%BF%87%E7%B1%BB%E6%96%B9%E6%B3%95%E4%B8%AD%E9%80%9A%E5%B8%B8%E5%B0%86%E5%85%B6%E5%91%BD%E5%90%8D%E4%B8%BA,cls%EF%BC%8CPython%20%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E7%B1%BB%E6%9C%AC%E8%BA%AB%E7%BB%91%E5%AE%9A%E7%BB%99%20cls%20%E5%8F%82%E6%95%B0%EF%BC%88%E6%B3%A8%E6%84%8F%EF%BC%8C%E7%BB%91%E5%AE%9A%E7%9A%84%E4%B8%8D%E6%98%AF%E7%B1%BB%E5%AF%B9%E8%B1%A1%EF%BC%89%E3%80%82&quot;&gt;Python实例方法、静态方法和类方法详解（包含区别和用法)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/7b8bf60def7e&quot;&gt;总结Java和Python面向对象的不同点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_37584164/article/details/102645924&quot;&gt;python与java面向对象的比较&lt;/a&gt;&lt;/p&gt;</content><author><name>xiesunsun</name></author><category term="学习" /><category term="学习" /><summary type="html">关于类文件命名   在java中规定类文件的名称必须跟文件中唯一的一个public类的类名一样，而在python中没有这个要求，保存python类的文件名与类名没有关系,但是文件名最好有具体的含义 关于python中类的格式 与其他语言类似，约定首字母大写的名称指的是类 同样具有构造函数，类变量，成员变量，类方法，成员方法 如下图 class Student: &quot;&quot;&quot;学生类&quot;&quot;&quot; count=0 def __init__(self,name,age): ''''初始化方法''' self.name=name self._age=age def getAge(self): return self.age @classmethod def getNum(cls): return cls.count 同等效果的 java代码 package test; public class Student { public static int count=0; private int age; public String name; public Student() { // TODO Auto-generated constructor stub }//无参构造方法 public Student(String name,int age) { this.name=name; this.age=age; count++; } public int getAge() { return this.age; } public static int getNum() { return count; } } 关于指向该类的实例指针this,self，以及父类的super   java中的this,表示指向该类的实例对象，python中的self表示的创建类的实例本身，super都是指向父类的实例对象 关于构造方法，其他方法   java中的构造函数分为（默认），有参（支持重载），构造函数名与类名一致   python的构造函数为__init__,其中形参selff必不可少，创建实例时不需要传入该参数，python解释器会自动传入，python类中的方法都需要显式带上self参数，通过对象调用时不用传入该参数 class Student: &quot;&quot;&quot;学生类&quot;&quot;&quot; count=0 def __init__(self,name,age): ''''构造方法''' self.name=name self._age=age def getAge(self):#self必不可少 return self.age @classmethod def getNum(cls): return cls.count 关于实例变量，类变量，类方法   在java中定义在类中的变量如果不是static修饰的，指的是实例变量（每个对象都会保存一份该变量，可以直接通过类名来访问）下图:Student类中的count在python中属于类变量，属于整个类，所有实例对象共同拥有一个count变量，相当于java中的实例变量（static修饰）,而age,name等在函数里通过self定义的变量称之为实例变量（需要通过实例对象来访问）。 class Student: &quot;&quot;&quot;学生类&quot;&quot;&quot; count=0#类变量 def __init__(self,name,age): ''''构造方法''' self.name=name#实例变量 self._age=age def getAge(self):#self必不可少 return self.age @classmethod def getNum(cls): return cls.count   类方法:java中的类方法通过static修饰，可以通过类名直接访问,python中的类方法和实例方法相似，它最少也要包含一个参数cls，Python 会自动将类本身绑定给 cls 参数和实例方法最大的不同在于，类方法需要使用＠classmethod修饰符进行修饰,如上图的getNum() 方法   在根据类创建完成的对象仍可以通过对象名.属性名的情况下增加对于该实例变量的属性，如下例 a=Student('xiaoming','17') a.sex='男' print(a.age) 关于对象的创建   java可以通过new关键字来实现对象的实例化 python则通过类名来进行创建 //java创建学生对象 Student a=new Student(&quot;xiaoming&quot;,17); #python创建学生对象 a=Student('xiaoming','17') 关于访问权限修饰符 java中有default,private,protected,public访问修饰符来控制类中属性的访问 python默认情况下类的所有成员变量都是public，如果需要，可以通过变量名前添加单个前缀_实现protected的效果，通过添加两个前缀__实现private效果，例如上面python student类的age属性 //java访问修饰权限 public static int count=0; private int age; public String name; #python访问修饰权限 self.name=name self._age=age ps:对于python中”private”修饰的变量你仍然可以同过对象名._类名__属性名的方式进行访问操作 关于属性，方法的调用   java，python都可以通过实例对象.属性名(方法名)访问或者调用可见的方法 关于类继承   python通过类名后的括号()来实现，java通过关键字extend来实现，python也支持多继承 class gstudent(Student): def __init__(self,name,age): super().__init__(name,age) ps:运行时，会把该文件中所包含的类给事先加载到frame里去 参考博客 Python中self用法详解 Python实例方法、静态方法和类方法详解（包含区别和用法) 总结Java和Python面向对象的不同点 python与java面向对象的比较</summary></entry><entry><title type="html">MARKDOWN用法</title><link href="http://localhost:4000/markdown.html" rel="alternate" type="text/html" title="MARKDOWN用法" /><published>2021-11-06T00:00:00+08:00</published><updated>2021-11-06T00:00:00+08:00</updated><id>http://localhost:4000/markdown</id><content type="html" xml:base="http://localhost:4000/markdown.html">&lt;h1 id=&quot;标题&quot;&gt;标题&lt;/h1&gt;
&lt;h2 id=&quot;二级标题&quot;&gt;二级标题&lt;/h2&gt;
&lt;h3 id=&quot;三级标题&quot;&gt;三级标题&lt;/h3&gt;
&lt;h4 id=&quot;四级标题&quot;&gt;四级标题&lt;/h4&gt;
&lt;p&gt;依次类推&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;正文直接写就好了，但要注意如果要换行的话，是需要空一行才可以的！
    &lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt; #include&amp;lt;stdio.h&amp;gt;
 int main(void)
 {
  for(int i=0;i&amp;lt;100;i++)
  {
      printf(&quot;now value is %d\n&quot;,i);
  }
  return 0;
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;python代码可以这么写
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;printnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;我只能说一句话markdown太厉害了，牛！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;多级列表的产生&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;注意需要在序号的后面需要加上一个空格才会产生列表的效果
    &lt;ol&gt;
      &lt;li&gt;产生多级的效果需要在指定的上一级标签后回车，加tab键产生效果&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;无序列表的操作&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个横线加上一个空格就可以生成
    &lt;ul&gt;
      &lt;li&gt;同样是支持多级的无序列表的，与有序列表的操作是相同的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;这样是加粗的操作，要用到两个星号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这样是斜体的操作，注意只需要用到一个星号&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;这样是既加粗有斜体的操作&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;插入表格的操作&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表头&lt;/th&gt;
      &lt;th&gt;表头&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;表格内容&lt;/td&gt;
      &lt;td&gt;可以写的不整齐但是它是会自动把你变成一个封闭的表格的&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;插入图片需要注意相应的路径，可以使用插件past image 还是挺好用的！&lt;/strong&gt;
&lt;img src=&quot;assets/img/../../../_site/assets/img/posts/2021-11-6/2021-11-06-21-10-39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;给指定文字超链接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如这里我给&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;这个文字超链接&lt;/p&gt;</content><author><name>xiesunsun</name></author><category term="观点" /><category term="杂" /><category term="教程" /><summary type="html">标题 二级标题 三级标题 四级标题 依次类推 正文直接写就好了，但要注意如果要换行的话，是需要空一行才可以的！ #include&amp;lt;stdio.h&amp;gt; int main(void) { for(int i=0;i&amp;lt;100;i++) { printf(&quot;now value is %d\n&quot;,i); } return 0; } python代码可以这么写 def printnum(): for i in range(10): if i%2==0: print(i) else: continue if __name__==&quot;__main__&quot;: num=[x for x in range(100)] printnum() 我只能说一句话markdown太厉害了，牛！ 多级列表的产生 注意需要在序号的后面需要加上一个空格才会产生列表的效果 产生多级的效果需要在指定的上一级标签后回车，加tab键产生效果 无序列表的操作 一个横线加上一个空格就可以生成 同样是支持多级的无序列表的，与有序列表的操作是相同的 这样是加粗的操作，要用到两个星号 这样是斜体的操作，注意只需要用到一个星号 这样是既加粗有斜体的操作 插入表格的操作 表头 表头 表格内容 可以写的不整齐但是它是会自动把你变成一个封闭的表格的 插入图片需要注意相应的路径，可以使用插件past image 还是挺好用的！ 给指定文字超链接 例如这里我给百度这个文字超链接</summary></entry><entry><title type="html">生日快乐！</title><link href="http://localhost:4000/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E8%AF%B4%E5%87%BA%E5%8F%A3.html" rel="alternate" type="text/html" title="生日快乐！" /><published>2021-11-06T00:00:00+08:00</published><updated>2021-11-06T00:00:00+08:00</updated><id>http://localhost:4000/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E8%AF%B4%E5%87%BA%E5%8F%A3</id><content type="html" xml:base="http://localhost:4000/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E8%AF%B4%E5%87%BA%E5%8F%A3.html">&lt;audio id=&quot;audio&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;
      &lt;source id=&quot;mp3&quot; src=&quot;assets/../../assets/music/如果的事.mp3&quot; autoplay=&quot;true&quot; /&gt;
      &lt;/audio&gt;

&lt;h6 id=&quot;bgm开启一下可能更好阅读一下_&quot;&gt;BGM开启一下，可能更好阅读一下(^_−)☆&lt;/h6&gt;

&lt;p&gt;  &lt;strong&gt;其实想了很久，不知道要不要写这些话，会不会太矫情，会不会打扰到你的生活，但是我还是写了这些话，我也想让你看到我的想法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  和你分开之后，我多次问自己为什么？后悔吗？我每次都在用一个借口来逃避，我不是一个很擅长和别人打交道的人，我很内向，有时候甚至有些自卑，可能别人看不出来，但是每当我自己一个人的时候，我就会感到自己的渺小与无能。&lt;/p&gt;

&lt;p&gt;  我必须要和你分开，和我在一起你只会不开心，我根本就没有办法和别人分享我心里的事情，每当QQ列表或者微信列表中出现你的消息时，我都会激动的拿起手机，仔细思考该如何回复你，才会让你对我产生好感，有时候想着想着，你就发了另一条消息，我只得继续去思考如何去回复下一条消息。可能这就是我老是不回别人消息的原因，有时候担心回复不好，不如不回复，这样可能你我都会轻松点&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/../../../assets/img/posts/2021-11-8/孤单.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  我想慢慢变强，想可以真正做一个王子，而不是在阴冷的角落孤独的蹲着。我想给你真正的快乐，给你真正的幸福，正如我经常说的那句话“愿你是阳光，明媚不忧伤！”在这期间我也曾经常去你的空间看你的动态，看你的朋友圈，登陆王者看你最近有没有打游戏，什么时候睡的，但是我慢慢发现你王者里有了别人，他会带你飞，他不会输，他能让你跟你的朋友玩的很开心，我越发觉得我好像彻底失去你了，没有机会了，可能人一旦放弃，就再也找不回来了，我安慰自己没事，也许会有人真的喜欢这样无能的我，想到这就又想起你之前和我说的话，愿意慢慢等我变得更外向，心中升起了一点点哀怨，然后就是释然，不等我其实也挺好的，这样可能你才能真正的开心快乐，而我也可以慢慢的去寻找孤独，去体会孤独了。&lt;/p&gt;

&lt;p&gt;  我处理完我所有不喜欢的事情，去做我喜欢的事，参加数学建模和别人沟通交流，参加体育活动，学生会，党员培训，协会交接，努力学习，我非常外向的去和别人说话，得到的却大多不如意，但是我仍然继续坚持下去，我相信我会变得更好的，但是直到兰正和我说的一句话，喜欢一个人关键在于你的态度，你不用想的那么多。我原来可以用我卑微的力量去守护一个人的，但我没有做，而处处伤害了她，我很忧愁在操场里跑了好几圈！&lt;/p&gt;

&lt;p&gt;  大三开学，我成为了班助，接触了好多大一新生他们很可爱，但是当他们问道我有没有女朋友的时候，我总是很忧伤，没有，可能以后再也不会有了。我一直用自己阳光温暖别人，却忘记了温暖我身旁最重要的人。&lt;/p&gt;

&lt;p&gt;  说了太多啰里吧嗦的，明天就是你的生日了，祝你生日快乐！开心最重要，说这些话想让你也知道，你很优秀！一定要开心快乐！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/../../../assets/img/posts/2021-11-8/生日快乐3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  愿你是阳光，明媚不忧伤！&lt;/p&gt;</content><author><name>xiesunsun</name></author><category term="感想" /><category term="感想" /><summary type="html">BGM开启一下，可能更好阅读一下(^_−)☆   其实想了很久，不知道要不要写这些话，会不会太矫情，会不会打扰到你的生活，但是我还是写了这些话，我也想让你看到我的想法   和你分开之后，我多次问自己为什么？后悔吗？我每次都在用一个借口来逃避，我不是一个很擅长和别人打交道的人，我很内向，有时候甚至有些自卑，可能别人看不出来，但是每当我自己一个人的时候，我就会感到自己的渺小与无能。   我必须要和你分开，和我在一起你只会不开心，我根本就没有办法和别人分享我心里的事情，每当QQ列表或者微信列表中出现你的消息时，我都会激动的拿起手机，仔细思考该如何回复你，才会让你对我产生好感，有时候想着想着，你就发了另一条消息，我只得继续去思考如何去回复下一条消息。可能这就是我老是不回别人消息的原因，有时候担心回复不好，不如不回复，这样可能你我都会轻松点   我想慢慢变强，想可以真正做一个王子，而不是在阴冷的角落孤独的蹲着。我想给你真正的快乐，给你真正的幸福，正如我经常说的那句话“愿你是阳光，明媚不忧伤！”在这期间我也曾经常去你的空间看你的动态，看你的朋友圈，登陆王者看你最近有没有打游戏，什么时候睡的，但是我慢慢发现你王者里有了别人，他会带你飞，他不会输，他能让你跟你的朋友玩的很开心，我越发觉得我好像彻底失去你了，没有机会了，可能人一旦放弃，就再也找不回来了，我安慰自己没事，也许会有人真的喜欢这样无能的我，想到这就又想起你之前和我说的话，愿意慢慢等我变得更外向，心中升起了一点点哀怨，然后就是释然，不等我其实也挺好的，这样可能你才能真正的开心快乐，而我也可以慢慢的去寻找孤独，去体会孤独了。   我处理完我所有不喜欢的事情，去做我喜欢的事，参加数学建模和别人沟通交流，参加体育活动，学生会，党员培训，协会交接，努力学习，我非常外向的去和别人说话，得到的却大多不如意，但是我仍然继续坚持下去，我相信我会变得更好的，但是直到兰正和我说的一句话，喜欢一个人关键在于你的态度，你不用想的那么多。我原来可以用我卑微的力量去守护一个人的，但我没有做，而处处伤害了她，我很忧愁在操场里跑了好几圈！   大三开学，我成为了班助，接触了好多大一新生他们很可爱，但是当他们问道我有没有女朋友的时候，我总是很忧伤，没有，可能以后再也不会有了。我一直用自己阳光温暖别人，却忘记了温暖我身旁最重要的人。   说了太多啰里吧嗦的，明天就是你的生日了，祝你生日快乐！开心最重要，说这些话想让你也知道，你很优秀！一定要开心快乐！   愿你是阳光，明媚不忧伤！</summary></entry></feed>